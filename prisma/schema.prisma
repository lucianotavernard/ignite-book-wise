// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  name      String
  email     String  @unique
  avatarUrl String? @map("avatar_url")

  ratings  Rating[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  type              String
  userId            String @map("user_id")
  provider          String
  providerAccountId String @map("provider_account_id")

  accessToken  String? @map("access_token")
  refreshToken String? @map("refresh_token")

  expiresAt    Int?    @map("expires_at")
  tokenType    String? @map("token_type")
  scope        String?
  idToken      String? @map("id_token")
  sessionState String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Book {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  name       String
  author     String
  summary    String
  coverUrl   String @map("cover_url")
  totalPages Int    @map("total_pages")

  ratings    Rating[]
  categories CategoriesOnBooks[]

  @@map("books")
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  bookId     String @map("book_id")
  categoryId String @map("category_id")

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@index([bookId])
  @@index([categoryId])
  @@map("categories_books")
}

model Rating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  bookId String @map("book_id")
  userId String @map("user_id")

  rate        Int
  description String

  book Book @relation(fields: [bookId], references: [id])

  user User @relation(fields: [userId], references: [id])

  @@index([bookId])
  @@index([userId])
  @@map("ratings")
}
